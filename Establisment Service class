package com.ti.lav.lavender.service;


import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ti.lav.lavender.common.BusinessException;
import com.ti.lav.lavender.db.domain.*;
import com.ti.lav.lavender.db.repository.EstablishmentRepository;
import com.ti.lav.lavender.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.*;

@Service
public class EstablishmentService extends BaseService {

    @Autowired
    private EstablishmentRepository establishmentRepository;
    @Autowired
    private ObjectMapper objectMapper;

    public EstablishmentsDTO saveEstablishemt(EstablishmentsDTO establishmentsDTO) throws BusinessException {
        EstablishmentsDTO updatedEstablishmentsDTO = saveOrUpdate(establishmentsDTO, Establishments.class);
//        //Establishment Services
//        updatedEstablishmentsDTO.getServices().forEach(dto->dto.setEstId(establishmentsDTO.getId()));
//        List<EstServices> dbEstServices = establishmentRepository.getEstablishmentServices(updatedEstablishmentsDTO.getId());
//        saveList(updatedEstablishmentsDTO.getServices(), dbEstServices, EstServices.class);

        // Save or update establishment services
        updatedEstablishmentsDTO.getServices().forEach(service -> {
            service.setEstId(establishmentsDTO.getId());
            List<EstServices> dbEstServices = establishmentRepository.getEstablishmentServices(updatedEstablishmentsDTO.getId());
            // Set parent ID for each availability within the service
            service.getAvailability().forEach(availability -> availability.setEstServiceID(service.getId()));
            try {
                saveList(Collections.singletonList(service), dbEstServices, EstServices.class);
            } catch (BusinessException e) {
                throw new RuntimeException(e);
            }
        });

        //Establishment Employees
        updatedEstablishmentsDTO.getEmployees().forEach(dto->dto.setEmployeeId(establishmentsDTO.getId()));
        List<EstEmployees> dbEstEmployees = establishmentRepository.getEstablishmentEmployees(updatedEstablishmentsDTO.getId());
        saveList(updatedEstablishmentsDTO.getEmployees(), dbEstEmployees, EstEmployees.class);

        //Establishment Images
        updatedEstablishmentsDTO.getImages().forEach(dto->dto.setImageId(establishmentsDTO.getId()));
        List<EstImages> dbEstImages = establishmentRepository.getEstablishmentImages(updatedEstablishmentsDTO.getId());
        saveList(updatedEstablishmentsDTO.getImages(), dbEstImages, EstImages.class);

        //Establishment OpeningHours
        updatedEstablishmentsDTO.getOpeningHours().forEach(dto->dto.setEstId(establishmentsDTO.getId()));
        List<EstOpeningHours> dbEstOpeningHours = establishmentRepository.getEstablishmentOpeningHours(updatedEstablishmentsDTO.getId());
        saveList(updatedEstablishmentsDTO.getOpeningHours(), dbEstOpeningHours, EstOpeningHours.class);

        //Establishment ServiceAddOnnMap
        updatedEstablishmentsDTO.getServiceAddOnnMap().forEach(dto->dto.setMapId(establishmentsDTO.getId()));
        List<EstServiceAddOnnMap> dbEstServiceAddOnnMap = establishmentRepository.getEstablishmentServiceAddOnnMap(updatedEstablishmentsDTO.getId());
        saveList(updatedEstablishmentsDTO.getServiceAddOnnMap(), dbEstServiceAddOnnMap, EstServiceAddOnnMap.class);





        return updatedEstablishmentsDTO;
    }

    public EstablishmentsDTO getEstablishemt(long id) throws BusinessException {
        EstablishmentsDTO establishmentsDTO = getOne(Establishments.class, EstablishmentsDTO.class , id);
        List<EstServices> dbEstServices = establishmentRepository.getEstablishmentServices(establishmentsDTO.getId());
        establishmentsDTO.setServices(Arrays.asList(modelMapper.map(dbEstServices, EstServicesDTO[].class)));

        List<EstEmployees> dbEstEmployees = establishmentRepository.getEstablishmentEmployees(establishmentsDTO.getId());
        establishmentsDTO.setEmployees(Arrays.asList(modelMapper.map(dbEstEmployees, EstEmployeesDTO[].class)));

        List<EstImages> dbEstImages = establishmentRepository.getEstablishmentImages(establishmentsDTO.getId());
        establishmentsDTO.setImages(Arrays.asList(modelMapper.map(dbEstImages, EstImagesDTO[].class)));

        List<EstOpeningHours> dbEstOpeningHours = establishmentRepository.getEstablishmentOpeningHours(establishmentsDTO.getId());
        establishmentsDTO.setOpeningHours(Arrays.asList(modelMapper.map(dbEstOpeningHours, EstOpeningHoursDTO[].class)));

        List<EstServiceAddOnnMap> dbEstServiceAddOnnMap = establishmentRepository.getEstablishmentServiceAddOnnMap(establishmentsDTO.getId());
        establishmentsDTO.setServiceAddOnnMap(Arrays.asList(modelMapper.map(dbEstServiceAddOnnMap, EstServiceAddOnnMapDTO[].class)));


        return establishmentsDTO;
    }

    public List<EstablishmentsDTO> getAllEstablishments() throws BusinessException {
        List<Establishments> establishmentsList = establishmentRepository.findAll();
        List<EstablishmentsDTO> establishmentsDTOList = Arrays.asList(modelMapper.map(establishmentsList, EstablishmentsDTO[].class));

        for (EstablishmentsDTO establishment : establishmentsDTOList) {
            for (EstServicesDTO service : establishment.getServices()) {
                service.setAvailability(groupAvailabilityByDate(service.getAvailability()));
            }
        }

        return establishmentsDTOList;
  //      return Arrays.asList(modelMapper.map(establishmentsList, EstablishmentsDTO[].class));
    }
    private List<AvailabilityDTO> groupAvailabilityByDate(List<AvailabilityDTO> availabilityList) {
        Map<String, List<String>> groupedAvailability = new HashMap<>();

        // Convert AvailabilityDTO objects to JSON strings
        List<String> availabilityStrList = new ArrayList<>();
        for (AvailabilityDTO availability : availabilityList) {
            try {
                String availabilityStr = objectMapper.writeValueAsString(availability);
                availabilityStrList.add(availabilityStr);
            } catch (JsonProcessingException e) {
                e.printStackTrace();
            }
        }

        for (String availabilityStr : availabilityStrList) {
            try {
                Map<String, Object> availabilityMap = objectMapper.readValue(availabilityStr, new TypeReference<Map<String, Object>>() {});

                String date = (String) availabilityMap.get("date");
                List<String> timeSlots = (List<String>) availabilityMap.get("timeSlots");

                if (groupedAvailability.containsKey(date)) {
                    groupedAvailability.get(date).addAll(timeSlots);
                } else {
                    groupedAvailability.put(date, new ArrayList<>(timeSlots));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // Convert grouped availability back to list of AvailabilityDTO
        List<AvailabilityDTO> groupedAvailabilityDTOList = new ArrayList<>();
        for (Map.Entry<String, List<String>> entry : groupedAvailability.entrySet()) {
            AvailabilityDTO availabilityDTO = new AvailabilityDTO();
            availabilityDTO.setDate(entry.getKey());
            availabilityDTO.setTimeSlots(entry.getValue());
            groupedAvailabilityDTOList.add(availabilityDTO);
        }

        return groupedAvailabilityDTOList;
    }

    

}
